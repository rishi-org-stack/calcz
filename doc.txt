features
basic 
1. given a mathematical statement including +,-,/,*

advanced
1. grouping statement according to brackets
2. include double type
3. order operation according to PEMDAS

Technical details
What do i know?
1. How to convert array of byte into stream of Tokens.
2. How to make result from this Token.
lexical analysis: https://www.javatpoint.com/the-phases-of-a-compiler-lexical-analysis
symbol table: https://www.javatpoint.com/symbol-table
interpreter: https://craftinginterpreters.com/the-lox-language.html

Lexical Analysis
1. break down byte stream into token
2. load token stream into equal sized buffer
3. token is pre-defined seq of character that can not be broken down futher.
4. lexeme a patter of token is lexem
5. identify lexem using fat and slow pointer in the buffer
6. if a given lexeme does not match a pattern its lexical error


const std = @import("std");
const assert = std.debug.assert;

//-------------------------
const lexerF = @import("lexer.zig");
const Lexer = lexerF.Lexer;
const LexicalError = lexerF.LexicalError;
//-------------------------

const syntax = @import("syntax.zig");
const Allocator = std.mem.Allocator;
const gpa = std.heap.GeneralPurposeAllocator;
const Queue = std.atomic.Queue;
pub fn Tree() type {
    return struct {
        const Self = @This();
        root: Node,

        /// Node inside the tree.
        pub const Node = struct {
            value: Lexeme,
            left: ?*Node,
            right: ?*Node,

            fn init(value: Lexeme) Node {
                return Node{
                    .value = value,
                    .left = null,
                    .right = null,
                };
            }

            fn sum(self: *Node) Lexeme {
                if (self.*.value.kind == LexemeTypeTag.number) return self.*.value;
                return lexemeF.operate(self.*.value, self.*.left.?.*.value, self.*.right.?.*.sum());
            }
        };

        pub fn init(value: Lexeme) Self {
            return Self{
                .root = Node.init(value),
            };
        }

        /// Errors:
        ///     If a new node cannot be allocated.
        pub fn allocateNode(self: *Self, allocator: Allocator) !*Node {
            _ = self;
            return allocator.create(Node);
        }

        /// Deallocate a node. Node must have been allocated with `allocator`.
        ///
        /// Arguments:
        ///     node: Pointer to the node to deallocate.
        ///     allocator: Dynamic memory allocator.
        pub fn destroyNode(tree: *Self, node: *Node, allocator: Allocator) void {
            assert(tree.containsNode(node));
            allocator.destroy(node);
        }

        /// Allocate and initialize a node and its value.
        ///
        /// Arguments:
        ///     value: Value (aka weight, key, etc.) of newly created node.
        ///     allocator: Dynamic memory allocator.
        ///
        /// Returns:
        ///     A pointer to the new node.
        ///
        /// Errors:
        ///     If a new node cannot be allocated.
        pub fn createNode(tree: *Self, value: Lexeme, allocator: Allocator) !*Node {
            var node = try tree.allocateNode(allocator);
            node.* = Node.init(value);
            return node;
        }

        pub fn log(self: *Self) void {
            var root = &self.*.root;
            while (root.left != null) {
                root.value.log();
                root.right.?.*.value.log();
                root.left.?.*.value.log();
                root = root.left.?;
            }
        }
    };
}
//-------------------------
const operatorF = @import("operator.zig");
const Operator = operatorF.Operator;
const OperatorTag = operatorF.OperatorTag;
const OperatorError = operatorF.OperationError;
//------------------------
pub fn makeTreefromLexemes(lexemes: []Lexeme, size: usize, allocator: Allocator) !Tree() {
    var tree = Tree().init(lexemes[1]);
    var root = &tree.root;
    var leftN = tree.createNode(lexemes[0], allocator) catch |err| {
        std.debug.print("err {any}\n", .{err});
        return err;
    };

    var rightN = tree.createNode(lexemes[2], allocator) catch |err| {
        std.debug.print("err {any}\n", .{err});
        return err;
    };
    root.*.left = leftN;
    root.*.right = rightN;

    var i: usize = 3;
    while (i < size) {
        var newNode = tree.createNode(lexemes[i], allocator) catch |err| {
            std.debug.print("err {any}\n", .{err});
            return err;
        };
        var newRightNode = tree.createNode(lexemes[i + 1], allocator) catch |err| {
            std.debug.print("err {any}\n", .{err});
            return err;
        };

        newNode.*.right = newRightNode;
        newNode.*.left = root;
        root = newNode;
        i += 2;
    }
    tree.root = root.*;

    return tree;
}

//-------------------------
const lexemeF = @import("lexeme.zig");
const Lexeme = lexemeF.Lexeme;
const LexemeTypeTag = lexemeF.LexemeTypeTag;
//-------------------------

pub fn main() !void {
    var allocator = gpa(.{}){};
    var lexemes = try Lexer.fromBufferStream(allocator.allocator(), "1 + 1 + 2 + 3", 13);

    std.debug.print("len {d}\n", .{lexemes.len});
    _ = syntax.syntaxAnalyzer(lexemes, lexemes.len) catch |err| {
        std.debug.print("invalid syntax err: {any}\n", .{err});
        return;
    };

    var size = lexemes.len;
    var tree = try makeTreefromLexemes(lexemes, size, allocator.allocator());
    tree.log();
}

test "simple test" {}
